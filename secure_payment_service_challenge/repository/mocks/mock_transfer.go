// Code generated by MockGen. DO NOT EDIT.
// Source: repository/transfer.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
	models "github.com/maty546/secure_payment_service_challenge/models"
)

// MockITransferRepository is a mock of ITransferRepository interface.
type MockITransferRepository struct {
	ctrl     *gomock.Controller
	recorder *MockITransferRepositoryMockRecorder
}

// MockITransferRepositoryMockRecorder is the mock recorder for MockITransferRepository.
type MockITransferRepositoryMockRecorder struct {
	mock *MockITransferRepository
}

// NewMockITransferRepository creates a new mock instance.
func NewMockITransferRepository(ctrl *gomock.Controller) *MockITransferRepository {
	mock := &MockITransferRepository{ctrl: ctrl}
	mock.recorder = &MockITransferRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITransferRepository) EXPECT() *MockITransferRepositoryMockRecorder {
	return m.recorder
}

// CompleteInternalTransfer mocks base method.
func (m *MockITransferRepository) CompleteInternalTransfer(c *gin.Context, transfer models.Transfer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteInternalTransfer", c, transfer)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteInternalTransfer indicates an expected call of CompleteInternalTransfer.
func (mr *MockITransferRepositoryMockRecorder) CompleteInternalTransfer(c, transfer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteInternalTransfer", reflect.TypeOf((*MockITransferRepository)(nil).CompleteInternalTransfer), c, transfer)
}

// GetByID mocks base method.
func (m *MockITransferRepository) GetByID(c *gin.Context, id uint) (models.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", c, id)
	ret0, _ := ret[0].(models.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockITransferRepositoryMockRecorder) GetByID(c, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockITransferRepository)(nil).GetByID), c, id)
}

// GetPendingPaymentsAmountForAccount mocks base method.
func (m *MockITransferRepository) GetPendingPaymentsAmountForAccount(c *gin.Context, accountID string) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingPaymentsAmountForAccount", c, accountID)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingPaymentsAmountForAccount indicates an expected call of GetPendingPaymentsAmountForAccount.
func (mr *MockITransferRepositoryMockRecorder) GetPendingPaymentsAmountForAccount(c, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingPaymentsAmountForAccount", reflect.TypeOf((*MockITransferRepository)(nil).GetPendingPaymentsAmountForAccount), c, accountID)
}

// MakeExternalPayment mocks base method.
func (m *MockITransferRepository) MakeExternalPayment(c *gin.Context, accountID string, transfer models.Transfer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeExternalPayment", c, accountID, transfer)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeExternalPayment indicates an expected call of MakeExternalPayment.
func (mr *MockITransferRepositoryMockRecorder) MakeExternalPayment(c, accountID, transfer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeExternalPayment", reflect.TypeOf((*MockITransferRepository)(nil).MakeExternalPayment), c, accountID, transfer)
}

// ReceiveExternalPayment mocks base method.
func (m *MockITransferRepository) ReceiveExternalPayment(c *gin.Context, accountID string, transfer models.Transfer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReceiveExternalPayment", c, accountID, transfer)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReceiveExternalPayment indicates an expected call of ReceiveExternalPayment.
func (mr *MockITransferRepositoryMockRecorder) ReceiveExternalPayment(c, accountID, transfer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveExternalPayment", reflect.TypeOf((*MockITransferRepository)(nil).ReceiveExternalPayment), c, accountID, transfer)
}

// Save mocks base method.
func (m *MockITransferRepository) Save(c *gin.Context, acc models.Transfer) (models.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", c, acc)
	ret0, _ := ret[0].(models.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockITransferRepositoryMockRecorder) Save(c, acc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockITransferRepository)(nil).Save), c, acc)
}

// SetStatus mocks base method.
func (m *MockITransferRepository) SetStatus(c *gin.Context, id uint, newStatus models.TransferStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStatus", c, id, newStatus)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStatus indicates an expected call of SetStatus.
func (mr *MockITransferRepositoryMockRecorder) SetStatus(c, id, newStatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockITransferRepository)(nil).SetStatus), c, id, newStatus)
}
